<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

  if (window.innerWidth >= 768) {
    const cover = document.getElementById("object") as HTMLDivElement;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, 400 / 400, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true });
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    renderer.setSize(cover.offsetWidth, cover.offsetHeight);
    cover.appendChild(renderer.domElement);
    renderer.domElement.style.border = "2px solid #609fff";
    renderer.domElement.style.borderRadius = "50%";
    renderer.domElement.style.overflow = "hidden";

    const rectLight = new THREE.PointLight(0xffffff, 20, 100, 1);
    rectLight.position.set(0, 1.5, 4);
    rectLight.castShadow = true;
    rectLight.shadow.mapSize.width = 1024;
    rectLight.shadow.mapSize.height = 1024;
    scene.add(rectLight);

    const light = new THREE.PointLight(0xfcba61, 90, 100);
    light.position.set(3, 3, 4);
    light.castShadow = true;
    light.shadow.mapSize.width = 1024;
    light.shadow.mapSize.height = 1024;

    let darkModeOn = true;
    document.getElementById("moon")?.addEventListener("click", () => {
      if (darkModeOn) {
        scene.remove(rectLight);
        scene.add(light);
      } else {
        scene.remove(light);
        scene.add(rectLight);
      }
      darkModeOn = !darkModeOn;
    });

    let character: THREE.Object3D;
    let mixer: THREE.AnimationMixer;
    let greetings: THREE.AnimationAction;
    let idle: THREE.AnimationAction;
    const loader = new GLTFLoader();
    loader.load("/models/character.glb", (glb) => {
      character = glb.scene;
      character.traverse((child) => {
        if (child instanceof THREE.Mesh) {
          child.castShadow = true;
          child.receiveShadow = true;
        }
      });
      character.position.y = -0.05

      scene.add(character);
      camera.position.set(
        character.position.x,
        character.position.y + 1.5,
        character.position.z + 2.5
      );

      mixer = new THREE.AnimationMixer(character);
      greetings = mixer.clipAction(glb.animations[16]);
      idle = mixer.clipAction(glb.animations[3]);
      greetings.play();
      greetings.setLoop(THREE.LoopOnce, 1);
      greetings.fadeIn(0.5);
      idle.timeScale = 0.2;
      idle.play();

      function playAnimation() {
        greetings.stop();
        greetings.reset();
        greetings.enabled = true;
        greetings.play();
        greetings.setLoop(THREE.LoopOnce, 1);
      }

      setInterval(playAnimation, 10000);
    });

    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableRotate = false;
    controls.enableZoom = false;

    const clock = new THREE.Clock();

    function animate() {
      requestAnimationFrame(animate);

      if (mixer) {
        mixer.update(clock.getDelta());
      }
      renderer.render(scene, camera);
    }

    animate();
  }
</script>
