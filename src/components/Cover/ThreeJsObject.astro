<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

  if (window.innerWidth >= 768) {
    const cover = document.getElementById("object") as HTMLDivElement;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, 400 / 400, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true });
    renderer.setSize(cover.offsetWidth, cover.offsetHeight);
    cover.appendChild(renderer.domElement);

    const rectLight = new THREE.RectAreaLight(0xffffff, 2.5);
    rectLight.position.set(0, 3, 3);
    rectLight.lookAt(0, 0, 0);
    scene.add(rectLight);

    let character: THREE.Object3D;
    let mixer: THREE.AnimationMixer;
    let greetings: THREE.AnimationAction;
    let idle: THREE.AnimationAction;
    const loader = new GLTFLoader();
    loader.load("/models/character.glb", (glb) => {
      character = glb.scene;
      scene.add(character);
      camera.position.set(character.position.x, character.position.y + 1.5, character.position.z + 2.5);

      mixer = new THREE.AnimationMixer(character);
      greetings = mixer.clipAction(glb.animations[16]);
      idle = mixer.clipAction(glb.animations[3]);
      greetings.play();
      greetings.setLoop(THREE.LoopOnce, 1);
      greetings.fadeIn(0.5);
      idle.timeScale = 0.3;
      idle.play();

      function playAnimation() {
        greetings.stop();
        greetings.reset();
        greetings.enabled = true;
        greetings.play();
        greetings.setLoop(THREE.LoopOnce, 1);
      }

      setInterval(playAnimation, 10000);
    });

    const clock = new THREE.Clock();

    function animate() {
      requestAnimationFrame(animate);

      if (mixer) {
        mixer.update(clock.getDelta()); // Actualizar la animaci√≥n con el tiempo transcurrido
      }

      renderer.render(scene, camera);
    }

    animate();
  }
</script>
