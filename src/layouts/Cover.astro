<section class="d-flex flex-row justify-content-center">
  <div class="content">
    <div id="cover" class="content-header d-flex flex-row">
      <div class="titles">
        <span
          ><span class="hello">hello</span>, I'm <strong>Javier</strong>, a</span
        >
        <span><strong>Software developer</strong></span>
      </div>
    </div>

    <div class="content-footer d-flex flex-row">
      <span id="about-me">Read more</span>
      <!-- El id del span es para los links -->
      <i class="bi bi-arrow-down"></i>
    </div>
  </div>
</section>

<script>
  // if (window.innerWidth >= 768) {
  //   var script = document.createElement("script");
  //   script.src = "src/scripts/ThreeJsObject.js";
  //   script.type = "module";
  //   document.getElementById("cover").appendChild(script);
  // }

  import * as THREE from "three";

  const cover = document.getElementById("cover");

  // 1. Crear la escena, la cámara y el renderizador
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, 400 / 400, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ alpha: true });
  renderer.setSize(400, 400);
  cover.appendChild(renderer.domElement);

  const textureLoader = new THREE.TextureLoader();
  const texture = textureLoader.load("self-image.jpg", (texture) => {
    texture.alphaTest = 0.5; // Configura un valor para la transparencia, si es necesario
  });

  const radius = 6;
  const segments = 1000; // Cantidad de segmentos (más segmentos = más suave la circunferencia)
  const circleGeometry = new THREE.CircleGeometry(radius, segments);

  const material = new THREE.MeshBasicMaterial({
    map: texture,
    side: THREE.DoubleSide,
  });

  const circle = new THREE.Mesh(circleGeometry, material);
  scene.add(circle);
  camera.position.z = 10;

  window.addEventListener("mousemove", (event) => {
    if (circle) {
      // Normalizamos la posición del ratón
      const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
      const mouseY = (event.clientY / window.innerHeight) * 2 + 1;

      // Calculamos la rotación en base a la posición del ratón
      circle.rotation.y = mouseX * 0.03; // Rota en el eje Y
      circle.rotation.x = mouseY * 0.03; // Rota en el eje X (opcional)
    }
  });

  // 6. Función de animación
  function animate() {
    requestAnimationFrame(animate);

    renderer.render(scene, camera);
  }

  animate();
</script>

<style>
  section {
    height: 100vh;
    color: white;
  }

  .hello {
    font-family: "Borel", cursive;
  }

  .content {
    height: 100%;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 0.2fr;
  }

  .content-header {
    margin-top: 5rem;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 8rem;
  }

  .titles {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    font-size: xx-large;
    align-items: center;
    justify-content: center;
  }

  strong {
    color: #609fff;
  }

  .content-footer {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 10px;
  }

  .bi-arrow-down {
    position: relative;
    z-index: -1;
    animation: smoothbouncearrow 0.5s infinite alternate;
  }

  @keyframes smoothbouncearrow {
    from {
      transform: translate3d(0, -3px, 0);
    }
    to {
      transform: translate3d(0, 3px, 0);
    }
  }

  @media only screen and (max-width: 600px) {
    .content-footer {
      padding-top: 0.5rem;
      align-items: start;
    }
  }
</style>
